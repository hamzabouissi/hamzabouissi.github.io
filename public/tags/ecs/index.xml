<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ECS on chown u&#43;r mind</title>
    <link>//localhost:1313/tags/ecs/</link>
    <description>Recent content in ECS on chown u&#43;r mind</description>
    <image>
      <title>chown u&#43;r mind</title>
      <url>//localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>//localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.133.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Apr 2023 15:36:32 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/tags/ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GCP -&gt; AWS Migration: Stress Swallows You</title>
      <link>//localhost:1313/posts/stress-swallows-you/</link>
      <pubDate>Thu, 20 Apr 2023 15:36:32 +0100</pubDate>
      <guid>//localhost:1313/posts/stress-swallows-you/</guid>
      <description>3 days passes, and I&amp;rsquo;m struggling on the same bug, Am I looking at the wrong side of the window, I don&amp;rsquo;t know, I think the best way to understand is going back and examine every command line and line of code I wrote.
So at first, After I took the decision to use AWS copilot, I look at the task on JIRA, analyzed it carefully and saw the need to deploy application dependencies first, one of the dependencies is the database .</description>
      <content:encoded><![CDATA[<blockquote>
<p><em>3 days passes, and I&rsquo;m struggling on the same bug, Am I looking at the wrong side of the window, I don&rsquo;t know, I think the best way to understand is going back and examine every command line and line of code I wrote.</em></p>
</blockquote>
<p>So at first, After I took the decision to use AWS copilot, I look at the task on JIRA, analyzed it carefully and saw the need to deploy application dependencies first, one of the dependencies is the database <strong>.</strong> We have been using PostgresSQL V14, so we just need the same version on the dev environment.</p>
<p>I run through the documentation, to catch any command on how to deploy a database with underlying infrastructure(VPC, Subnet, Route Table, &hellip;). The first command I saw</p>
<pre><code>copilot init
</code></pre>
<p>It fulfils the need of creating the underlying infrastructure, but it requires an application ready to deploy, but this is not the case now. A few minutes after and stumbled upon another command with the description &ldquo;creates a new <a href="https://aws.github.io/copilot-cli/docs/concepts/environments/">environment</a> where your services will live.&rdquo;</p>
<pre><code>copilot env init
</code></pre>
<p>When I run the above command, it asked me to run <code>copilot app init</code> first. And here is the output of environment creation</p>
<!-- raw HTML omitted -->
<p>From my understanding of the output and manifest.yml file, it seems after running <code>copilot env deploy</code> it will create two public and private subnets on separate regions. So I proceeded with the command, and here is the output</p>
<!-- raw HTML omitted -->
<p>I googled a few terms I didn&rsquo;t understand like ECS, security groups, and DNS namespace to have basic knowledge of what happens in the background.</p>
<p>The following task was deploying the database and this is when things got trickier, now one of the features of copilot is a command to deploy storage services like database, file system&hellip; etc. It supports two types of databases DynamoDB, Aurora</p>
<p>Aurora seems a great option as it&rsquo;s fully compatible with PostgresSQL, so I tried to deploy a cluster using the following command</p>
<pre><code> copilot storage init -n cluster -t Aurora --lifecycle environment --engine PostgreSQL
</code></pre>
<p>At the same time, I opened Thunderbird and I messaged the CTO asking if it was ok deploying Aurora instead of an RDS. I went back to the command and I found</p>
<blockquote>
<p>Couldn&rsquo;t find any workloads associated with app noteapp, try initializing one: copilot [svc/job] init .<br>
âœ˜ select a workload from noteapp : no workloads found in noteapp</p>
</blockquote>
<p>Well, the problem is obvious, I cannot deploy a storage service unless I create a service first and by service I mean containerized application.</p>
<p>I walked through the documentation again, and I found a magical feature that says &ldquo;Modeling Additional Environment Resources with AWS CloudFormation&rdquo;, this feature gave me the ability to deploy resources on an environment based.</p>
<p>That gave me goosebumps to understand CloudFormation, as it seems crucial in the next phases. The methodology was deploying a demo architecture to get comfortable with the services and the whole flow, I deployed one of the well-known architectures which is <strong>lambda function &amp; DynamoDB</strong> and here is my recap</p>
<p>CloudFormation file structure consists of 3 main blocks <strong>Parameters</strong> (Optional), <strong>Resources</strong> (Required), and <strong>Outputs</strong> (Optional).</p>
<ul>
<li><strong>Resources</strong> block encapsulate the services we need to deploy, Each service requires 2 properties <strong>Type, Properties</strong> and each service has different Properties, an example of that for <code>Lambda Function</code> there are <strong>Handler</strong> , <strong>Runtime</strong> , <strong>Code</strong> properties while on <code>DynamoDB::Table</code> there are different properties <strong>AttributeDefinitions</strong> , <strong>KeySchema</strong> , <strong>ProvisionedThroughput</strong></li>
</ul>
<!-- raw HTML omitted -->
<p>Now, AWS CLI has a built-in command for managing CloudFormation files, to create resources the first time the command is</p>
<pre><code>aws cloudformation create-stack --stack-name resource_stack --template-body file://cloudformation.yml --capabilities CAPABILITY_NAMED_IAM
</code></pre>
<p>and for update</p>
<pre><code>aws cloudformation update-stack --stack-name resource_stack --template-body file://cloudformation.yml --capabilities CAPABILITY_NAMED_IAM
</code></pre>
<p>An additional cool feature of AWS CloudFormation is the built-in managing dashboard where you can see your stacks and their status</p>
<!-- raw HTML omitted -->
<p>Then I started to think about integrating CloudFormation with Copilot until I looked through the window, and it was almost dark and my back was hurting, so I took the sign and went for a little bit of social life</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
